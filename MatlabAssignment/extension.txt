I have chosen to extend the formal grammar. The updated full grammar can be found in the ExtensionGrammar.txt file. An explanation of what I have added is given here:

-> RAND - this acts much likes ONES, but instead creates an array of random integers, based on the dimensions and maximum value given as arguments. There is testing within the test function to ensure that numbers produced remain within the bounds (0 to max) and that they average to near the median (over 250 numbers, ranging 0 to 1000). Margins are slightly wider than might be wanted in practice, but this is simply to ensure that only severe outliers cause the program to not run correctly.
-> RMV (Remove) - this can be used to remove individual rows, individual columns, or ranges of rows or columns, from a variable. The ranges for removal follow this syntax: [ 1 : 3 , : ]. The colon, when used by itself, denotes an ALL rows / columns. If ALL is used for both row and column ranges, or if a square-bracketed range is not given, this will remove the variable entirely from the variable list. This could be beneficial if working with particularly large data sets, or with limited memory allocation, however it is one function that does leave the user prone to cause errors by deleting variables that they may later attempt to access. The RMV function has been tested on a RAND array to assert that the new total is lower than the original total and to also assert that the average of the reduced data set is still within (slightly wider) bounds of the median.
-> Index - this has been implemented as an extension of the SET instruction. It is implemented within the Polish stack. When a variable is listed as a Polish argument, if it is followed by square-brackets, a new version of this variable is created that only contains the range of values indexed by the contents of the brackets. This is the variable that is pushed on to the stack, instead of the original variable. This does not overwrite the original variable. It can be used to access individual cells of an array, single columns or rows, column or row ranges, or any given subset of the original array. For example, for the 5x5 array $A, "$A [ 3 : 4 , 2 : 3 ]" will create a 2x2 array including the numbers that were in the 3rd and 4th row, in the 2nd and 3rd columns. The colon symbol can again be used to denote ALL rows or columns. If both rows and columns are set to ALL, this will essentially just pushdown the variable in its original form. Numbering of rows and columns for removal and indexing begins at 1. It can be used in combination with Unary and Binary operations, and otherwise operates as normal within the stack. Testing has been done on indexing to create a subset of a 5x5 ONES array, multiplying it by 5 within the same SET instruction, and then assertions have been made to ensure that the new total of the resulting 2x2 array is 20.

A more thorough exhibition of these additions to the grammar can be seen by running the testext.nlb file that was also submitted.